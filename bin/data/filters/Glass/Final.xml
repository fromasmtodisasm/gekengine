<?xml version="1.0"?>
<filter>
    <targets>
        <depth source="Opaque/PrePass" comparison="always" writemask="zero">
            <stencil reference="1" readmask="255" writemask="255">
                <front pass="replace" fail="keep" depthfail="keep" comparison="equal" />
                <back pass="keep" fail="keep" depthfail="keep" comparison="never" />
            </stencil>
        </depth>
    </targets>
    <textures>
        <texture source="Opaque/Deferred.Albedo" />
        <texture source="Glass/Deferred.World" />
        <texture source="Opaque/Deferred.Info" />
        <texture source="Opaque/Lighting.Diffuse" />
        <texture source="Opaque/Lighting.Specular" />
        <texture source="Opaque/Final.Buffer" />
        <texture source="Opaque/Deferred.World" />
    </textures>
    <pixel>
        <![CDATA[
            Texture2D     gs_pAlbedoBuffer         : register(t0);
            Texture2D     gs_pWorldBuffer          : register(t1);
            Texture2D     gs_pInfoBuffer           : register(t2);
            Texture2D     gs_pDiffuseBuffer        : register(t3);
            Texture2D     gs_pSpecularBuffer       : register(t4);
            Texture2D     gs_pOpaqueBuffer         : register(t5);
            Texture2D     gs_pOpaqueWorldBuffer    : register(t6);

            float4 MainPixelProgram(INPUT kInput) : SV_TARGET
            {
                float4 nAlbedo = gs_pAlbedoBuffer.Sample(gs_pPointSampler, kInput.texcoord);
                float4 nDiffuse = gs_pDiffuseBuffer.Sample(gs_pPointSampler, kInput.texcoord);
                float4 nSpecular = gs_pSpecularBuffer.Sample(gs_pPointSampler, kInput.texcoord);
                float4 nWorld = gs_pWorldBuffer.Sample(gs_pPointSampler, kInput.texcoord);
                float4 nInfo = gs_pInfoBuffer.Sample(gs_pPointSampler, kInput.texcoord);

                float nOpaqueDistance = gs_pOpaqueWorldBuffer.Sample(gs_pPointSampler, kInput.texcoord).w;
                float nRefractionDepth = ((nOpaqueDistance - nWorld.w) * 0.1f);
                float2 nOffset = (nWorld.xy * min(nRefractionDepth, 0.05f));
                float4 nOpaque = gs_pOpaqueBuffer.Sample(gs_pPointSampler, (kInput.texcoord + nOffset));

                float nFactor = ((1.0f - abs(dot(kInput.view, nWorld.xyz))) * 0.5f);
                nFactor = max(nFactor, nInfo.w);
                return (lerp(nOpaque, (nAlbedo * nDiffuse), nFactor) + nSpecular);
            }
        ]]>
    </pixel>
</filter>
