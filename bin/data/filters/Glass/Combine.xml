<?xml version="1.0"?>
<filter>
    <pixel>
        <targets>
            <depth source="Opaque/PrePass" comparison="always" writemask="zero">
                <stencil reference="1" readmask="255" writemask="255">
                    <front pass="replace" fail="keep" depthfail="keep" comparison="equal" />
                    <back pass="keep" fail="keep" depthfail="keep" comparison="never" />
                </stencil>
            </depth>
        </targets>
        <textures>
            <texture source="Opaque/Deferred.World" />
            <texture source="Opaque/Deferred.Info" />
            <texture source="Opaque/Lighting.Buffer" />
            <texture source="Glass/Deferred.World" />
            <texture source="Glass/Lighting.Diffuse" />
            <texture source="Glass/Lighting.Specular" />
        </textures>
        <![CDATA[
            Texture2D     gs_pOpaqueWorldBuffer             : register(t0);
            Texture2D     gs_pOpaqueInfoBuffer              : register(t1);
            Texture2D     gs_pOpaqueLightingBuffer          : register(t2);
            Texture2D     gs_pGlassWorldBuffer              : register(t3);
            Texture2D     gs_pGlassDiffuseBuffer            : register(t4);
            Texture2D     gs_pGlassSpecularBuffer           : register(t5);

            float4 MainPixelProgram(in INPUT kInput) : SV_TARGET
            {
                float4 nOpaqueWorld = gs_pOpaqueWorldBuffer.Sample(gs_pPointSampler, kInput.texcoord);
                float4 nOpaqueInfo = gs_pOpaqueInfoBuffer.Sample(gs_pPointSampler, kInput.texcoord);

                float4 nGlassWorld = gs_pGlassWorldBuffer.Sample(gs_pPointSampler, kInput.texcoord);
                float4 nGlassDiffuse = gs_pGlassDiffuseBuffer.Sample(gs_pPointSampler, kInput.texcoord);
                float4 nGlassSpecular = gs_pGlassSpecularBuffer.Sample(gs_pPointSampler, kInput.texcoord);

                float nRefractionDepth = ((nOpaqueWorld.w - nGlassWorld.w) * 0.1f);
                float2 nOffset = (nGlassWorld.xy * min(nRefractionDepth, 0.05f));
                float4 nOpaqueLighting = gs_pOpaqueLightingBuffer.Sample(gs_pPointSampler, (kInput.texcoord + nOffset));

                float nFactor = ((1.0f - abs(dot(kInput.view, nGlassWorld.xyz))) * 0.5f);
                //nFactor = max(nFactor, nOpaqueInfo.w);
                return (lerp(nOpaqueLighting, nGlassDiffuse, nFactor) + nGlassSpecular);
            }
        ]]>
    </pixel>
</filter>
