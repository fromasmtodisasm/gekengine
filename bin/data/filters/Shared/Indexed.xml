<![CDATA[
    #define gs_nThreadGroupSize             (gs_nLightTileSize * gs_nLightTileSize)

    Texture2D<float4> gs_pWorldBuffer       : register(t1);

    RWBuffer<uint> g_pTileOutput            : register(u0);

    groupshared uint g_nNumTileLights;
    groupshared uint g_nTileMinDepth;
    groupshared uint g_nTileMaxDepth;
    groupshared uint g_aTileLightList[gs_nMaxLights];

    [numthreads(gs_nLightTileSize, gs_nLightTileSize, 1)]
    void MainComputeProgram(uint3 nScreenPixel : SV_DispatchThreadID, uint3 nTileID : SV_GroupID, uint3 nTilePixelID : SV_GroupThreadID, uint nTilePixelIndex : SV_GroupIndex)
    {
        [branch]
        if(nTilePixelIndex == 0)
        {
            g_nNumTileLights = 0;
            g_nTileMinDepth = 0x7f7fffff;
            g_nTileMaxDepth = 0;
        }

        float nMinSampleDepth = gs_nCameraViewDistance;
        float nMaxSampleDepth = 0.0f;

        float nViewDepth = gs_pWorldBuffer[nScreenPixel.xy].w;
        float nLinearDepth = (gs_nProjectionMatrix._43 / (nViewDepth - gs_nProjectionMatrix._33));
        nMinSampleDepth = min(nMinSampleDepth, nViewDepth);
        nMaxSampleDepth = max(nMaxSampleDepth, nViewDepth);

        GroupMemoryBarrierWithGroupSync();

        if (nMaxSampleDepth >= nMinSampleDepth)
        {
            InterlockedMin(g_nTileMinDepth, asuint(nMinSampleDepth));
            InterlockedMax(g_nTileMaxDepth, asuint(nMaxSampleDepth));
        }

        GroupMemoryBarrierWithGroupSync();

        float nMinTileDepth = asfloat(g_nTileMinDepth);
        float nMaxTileDepth = asfloat(g_nTileMaxDepth);
        float2 nTileScale = (gs_nCameraSize.xy * rcp(2.0f * gs_nLightTileSize).xx);
        float2 nTileBias = (nTileScale - float2(nTileID.xy));
        float3 nXPlane = float3((gs_nProjectionMatrix._11 * nTileScale.x), 0.0f, nTileBias.x);
        float3 nYPlane = float3(0.0f, (-gs_nProjectionMatrix._22 * nTileScale.y), nTileBias.y);
        float3 nZPlane = float3(0.0f, 0.0f, 1.0f);
        float4 aFrustumPlanes[6] = 
        {
            // Sides
            float4(normalize(nZPlane - nXPlane), 0.0f),
            float4(normalize(nZPlane + nXPlane), 0.0f),
            float4(normalize(nZPlane - nYPlane), 0.0f),
            float4(normalize(nZPlane + nYPlane), 0.0f),

            // Near/far
            float4(0.0f, 0.0f, 1.0f, -nMinTileDepth),
            float4(0.0f, 0.0f, -1.0f, nMaxTileDepth),
        };

        [loop]
        for(uint nLight = nTilePixelIndex; nLight < gs_nMaxLights && gs_aLights[nLight].m_nRange > 0.0f; nLight += gs_nThreadGroupSize)
        {
            float4 nLightPosition = float4(gs_aLights[nLight].m_nPosition, 1.0f);
            float nLightRange = gs_aLights[nLight].m_nRange;
            bool bIsLightInFrustum = true;

            [unroll]
            for (uint nIndex = 0; nIndex < 6; ++nIndex)
            {
                float nDistance = dot(aFrustumPlanes[nIndex], nLightPosition);
                bIsLightInFrustum = (bIsLightInFrustum && (nDistance >= -nLightRange));
            }

            [branch]
            if (bIsLightInFrustum)
            {
                uint nTileIndex;
                InterlockedAdd(g_nNumTileLights, 1, nTileIndex);
                g_aTileLightList[nTileIndex] = nLight;
            }
        }

        GroupMemoryBarrierWithGroupSync();
        
        [branch]
        if(nTilePixelIndex < gs_nMaxLights)
        {
            uint nTileIndex = ((nTileID.y * gs_nDispatchXSize) + nTileID.x);
            uint nBufferIndex = ((nTileIndex * gs_nMaxLights) + nTilePixelIndex);
            uint nLightIndex = (nTilePixelIndex < g_nNumTileLights ? g_aTileLightList[nTilePixelIndex] : gs_nMaxLights);
            g_pTileOutput[nBufferIndex] = nLightIndex;
        }
    }
]]>