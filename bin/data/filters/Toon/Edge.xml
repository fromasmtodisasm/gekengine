<?xml version="1.0"?>
<filter>
    <defines>
        <define name="gs_nRadius" value="3" />
    </defines>

    <pixel>
        <resources>
            <resource stage="1" source="Toon/Deferred.Albedo" />
            <resource stage="2" source="Toon/Deferred.Normal" />
            <resource stage="3" source="Toon/Deferred.Depth" />
        </resources>
        
        <![CDATA[
            Texture2D     gs_pAlbedoBuffer          : register(t1);
            Texture2D     gs_pNormalBuffer          : register(t2);
            Texture2D     gs_pDepthBuffer           : register(t3);

            half3 DecodeNormal(half4 nEncoded)
            {
                half4 nNormal = ((nEncoded * half4(2, 2, 0, 0)) + half4(-1, -1, 1, -1));
                half nLength = dot(nNormal.xyz, -nNormal.xyw);
                nNormal.z = nLength;
                nNormal.xy *= sqrt(nLength);
                return ((nNormal.xyz * 2.0f) + half3(0, 0, -1));
            }

            float4 MainPixelProgram(INPUT kInput) : SV_TARGET
            {
                float2 nSize;
                gs_pDepthBuffer.GetDimensions(nSize.x, nSize.y);
                float2 nInverseCameraSize = (rcp(nSize) * gs_nRadius);

                float3 nSampleNormalP0 = DecodeNormal(gs_pNormalBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( nInverseCameraSize.x, 0.0f))));
                float3 nSampleNormalN0 = DecodeNormal(gs_pNormalBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2(-nInverseCameraSize.x, 0.0f))));
                float3 nSampleNormal0P = DecodeNormal(gs_pNormalBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( 0.0f, nInverseCameraSize.y))));
                float3 nSampleNormal0N = DecodeNormal(gs_pNormalBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( 0.0f,-nInverseCameraSize.y))));
                float3 nSampleNormalNN = DecodeNormal(gs_pNormalBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2(-nInverseCameraSize.x,-nInverseCameraSize.y))));
                float3 nSampleNormalPP = DecodeNormal(gs_pNormalBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( nInverseCameraSize.x, nInverseCameraSize.y))));
                float3 nSampleNormalNP = DecodeNormal(gs_pNormalBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2(-nInverseCameraSize.x, nInverseCameraSize.y))));
                float3 nSampleNormalPN = DecodeNormal(gs_pNormalBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( nInverseCameraSize.x,-nInverseCameraSize.y))));

                float4 nEdgeNormal;
                nEdgeNormal.x = dot(nSampleNormalP0, nSampleNormalN0);
                nEdgeNormal.y = dot(nSampleNormal0P, nSampleNormal0N);
                nEdgeNormal.z = dot(nSampleNormalNN, nSampleNormalPP);
                nEdgeNormal.w = dot(nSampleNormalNP, nSampleNormalPN);
                nEdgeNormal -= 0.7f;
                nEdgeNormal = step(0, nEdgeNormal);
                float nAverageEdgeNormal = saturate(dot(nEdgeNormal, 0.3f));

                float nInverseCameraViewDistance = rcp(gs_nCameraMaxDistance - gs_nCameraMinDistance);
	            float nCenterDepth =   ((gs_pDepthBuffer.Sample(gs_pPointSampler, kInput.texcoord).x - gs_nCameraMinDistance) * nInverseCameraViewDistance);
                float nSampleDepthP0 = ((gs_pDepthBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( nInverseCameraSize.x, 0.0f))).x - gs_nCameraMinDistance) * nInverseCameraViewDistance);
                float nSampleDepthN0 = ((gs_pDepthBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2(-nInverseCameraSize.x, 0.0f))).x - gs_nCameraMinDistance) * nInverseCameraViewDistance);
                float nSampleDepth0P = ((gs_pDepthBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( 0.0f, nInverseCameraSize.y))).x - gs_nCameraMinDistance) * nInverseCameraViewDistance);
                float nSampleDepth0N = ((gs_pDepthBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( 0.0f,-nInverseCameraSize.y))).x - gs_nCameraMinDistance) * nInverseCameraViewDistance);
                float nSampleDepthNN = ((gs_pDepthBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2(-nInverseCameraSize.x,-nInverseCameraSize.y))).x - gs_nCameraMinDistance) * nInverseCameraViewDistance);
                float nSampleDepthPP = ((gs_pDepthBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( nInverseCameraSize.x, nInverseCameraSize.y))).x - gs_nCameraMinDistance) * nInverseCameraViewDistance);
                float nSampleDepthNP = ((gs_pDepthBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2(-nInverseCameraSize.x, nInverseCameraSize.y))).x - gs_nCameraMinDistance) * nInverseCameraViewDistance);
                float nSampleDepthPN = ((gs_pDepthBuffer.Sample(gs_pPointSampler, (kInput.texcoord + float2( nInverseCameraSize.x,-nInverseCameraSize.y))).x - gs_nCameraMinDistance) * nInverseCameraViewDistance);
 
                float4 nEdgeDepth;
                nEdgeDepth.x = (nSampleDepthP0 + nSampleDepthN0);
                nEdgeDepth.y = (nSampleDepth0P + nSampleDepth0N);
                nEdgeDepth.z = (nSampleDepthNN + nSampleDepthPP);
                nEdgeDepth.w = (nSampleDepthNP + nSampleDepthPN);
                nEdgeDepth = (abs((2.0f * nCenterDepth) - nEdgeDepth) - 0.001f);
                nEdgeDepth = step(nEdgeDepth, 0);
                float nAverageEdgeDepth = saturate(dot(nEdgeDepth, 0.4f));

                float4 nAlbedo = gs_pAlbedoBuffer.Sample(gs_pPointSampler, kInput.texcoord);

                return float4((nAlbedo.xyz * nAverageEdgeDepth * nAverageEdgeNormal), 1.0f);
            }
        ]]>
    </pixel>
</filter>
