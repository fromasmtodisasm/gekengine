<?xml version="1.0"?>
<filter mode="forward">
    <render cullmode="back" />
    
    <targets>
        <target name="Albedo" format="RGBA_UINT8"/>
        <target name="World" format="RGBA_HALF"/>
        <target name="Info" format="RGBA_UINT8"/>
        <depth format="D24S8" comparison="lessequal" writemask="all" clear="1" />
    </targets>
    
    <pixel>
        <![CDATA[
            Texture2D     gs_pAlbedoMap             : register(t0);
            Texture2D     gs_pNormalMap             : register(t1);
            Texture2D     gs_pInfoMap               : register(t2);

            struct OUTPUT
            {
                float4 albedo                       : SV_TARGET0;
                float4 world                        : SV_TARGET1;
                float4 info                         : SV_TARGET2;
            };

            float3x3 GetCoTangentFrame( float3 nNormal, float3 nPosition, float2 nTexCoord )
            {
                // get edge vectors of the pixel triangle
                float3 nPositionDX = ddx( nPosition );
                float3 nPositionDY = ddy( nPosition );
                float2 nTexCoordDX = ddx( nTexCoord );
                float2 nTexCoordDY = ddy( nTexCoord );
 
                // solve the linear system
                float3 nPerpendicularDX = cross( nNormal, nPositionDX );
                float3 nPerpendicularDY = cross( nPositionDY, nNormal );
                float3 nTangent = nPerpendicularDY * nTexCoordDX.x + nPerpendicularDX * nTexCoordDY.x;
                float3 nBiTangent = nPerpendicularDY * nTexCoordDX.y + nPerpendicularDX * nTexCoordDY.y;
 
                // construct a scale-invariant frame 
                float nReciprocal = rsqrt( max( dot(nTangent,nTangent), dot(nBiTangent,nBiTangent) ) );
                return float3x3( nTangent * nReciprocal, nBiTangent * nReciprocal, nNormal );
            }

            OUTPUT MainPixelProgram(in INPUT kInput)
            {
                float4 nAlbedo = (gs_pAlbedoMap.Sample(gs_pLinearSampler, kInput.texcoord) * gs_nMaterialColor * kInput.color);

                [branch]
                if(nAlbedo.a < 0.5f)
                {
                    discard;
                }

                float3 nNormal;
                // Normals stored as 3Dc format, so [0,1] XY components only
                nNormal.xy = ((gs_pNormalMap.Sample(gs_pLinearSampler, kInput.texcoord).xy * 2.0) - 1.0f);
                nNormal.z = sqrt(1.0 - dot(nNormal.xy, nNormal.xy));

                float3x3 nCoTangentFrame = GetCoTangentFrame(kInput.viewnormal, -kInput.viewposition.xyz, kInput.texcoord);
                nNormal = normalize(mul(nNormal, nCoTangentFrame) * (kInput.frontface ? 1 : -1));

                OUTPUT kOutput;
                kOutput.albedo.xyz = nAlbedo.xyz;
                kOutput.albedo.a   = gs_bMaterialFullBright;
                kOutput.world.xyz  = nNormal;
                kOutput.world.w    = kInput.viewposition.z;
                kOutput.info       = gs_pInfoMap.Sample(gs_pLinearSampler, kInput.texcoord);
                return kOutput;
            }
        ]]>
    </pixel>
</filter>
