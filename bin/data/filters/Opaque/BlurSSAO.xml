<?xml version="1.0"?>
<filter>
    <defines>
        <define name="gs_nRadius" value="4" />
        <define name="gs_nScale" value="2" />
        <define name="gs_nEdgeSharpness" value="1" />
    </defines>

    <blend>
        <color source="one" destination="zero" operation="add" />
        <alpha source="destination_alpha" destination="zero" operation="add" />
    </blend>

    <pixel>
        <resources>
            <resource stage="1" source="Opaque/Deferred.Albedo" />
            <resource stage="2" source="Opaque/Deferred.Depth" />
            <resource stage="3" source="Opaque/SSAO.Ambient" />
        </resources>
        
        <![CDATA[
            Texture2D           gs_pAlbedoBuffer        : register(t1);
            Texture2D<float>    gs_pDepthBuffer         : register(t2);
            Texture2D<float>    gs_pAmbientBuffer       : register(t3);

            static const float gs_aGuassian[] = 
            //	{ 0.356642, 0.239400, 0.072410, 0.009869 };
            //	{ 0.398943, 0.241971, 0.053991, 0.004432, 0.000134 };  // stddev = 1.0
	            { 0.153170, 0.144893, 0.122649, 0.092902, 0.062970 };  // stddev = 2.0
            //	{ 0.111220, 0.107798, 0.098151, 0.083953, 0.067458, 0.050920, 0.036108 }; // stddev = 3.0

            float4 MainPixelProgram(INPUT kInput) : SV_TARGET
            {
                float2 nPixelSize;
                gs_pAmbientBuffer.GetDimensions(nPixelSize.x, nPixelSize.y);
                nPixelSize = rcp(nPixelSize);                

	            float nCenterDepth = gs_pDepthBuffer.Sample(gs_pPointSampler, kInput.texcoord);
	            float nCenterAmbient = gs_pAmbientBuffer.Sample(gs_pPointSampler, kInput.texcoord);

	            float nTotalWeight = gs_aGuassian[0];
	            float nAmbientOcclusion = nCenterAmbient * nTotalWeight;

	            [unroll]
	            for (int nSample = -gs_nRadius; nSample <= gs_nRadius; ++nSample)
	            {
		            // We already handled the zero case above.  This loop should be unrolled and the branch discarded
		            if (nSample != 0)
		            {
			            float2 nSampleCoord = kInput.texcoord + gs_nAxis * (nSample * nPixelSize * gs_nScale);
			            float nSampleDepth = gs_pDepthBuffer.Sample(gs_pPointSampler, nSampleCoord);
			            float nSampleAmbient = gs_pAmbientBuffer.Sample(gs_pPointSampler, nSampleCoord);

			            // spatial domain: offset gaussian tap
			            float nWeight = 0.3 + gs_aGuassian[abs(nSample)];

			            // range domain (the "bilateral" weight). As depth difference increases, decrease weight.
			            nWeight *= max(0.0, 1.0 - (2000.0 * gs_nEdgeSharpness) * abs(nSampleDepth - nCenterDepth));

			            nAmbientOcclusion += nSampleAmbient * nWeight;
			            nTotalWeight += nWeight;
		            }
	            }

	            const float gs_nEpsilon = 0.0001;
	            return nAmbientOcclusion / (nTotalWeight + gs_nEpsilon);	
            }
        ]]>
    </pixel>
</filter>
