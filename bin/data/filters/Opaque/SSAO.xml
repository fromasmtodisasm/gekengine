<?xml version="1.0"?>
<filter>
    <defines>
        <define name="gs_nNumSamples" value="16" />
        <define name="gs_nNumSpirals" value="12" />
        <define name="gs_nRadius" value="1" />
        <define name="gs_nBeta" value=".2" />
        <define name="gs_nEpsilon" value=".01" />
    </defines>

    <targets>
        <target name="Ambient" format="R_UINT8"/>
    </targets>

    <pixel>
        <resources>
            <resource stage="1" source="Opaque/Deferred.Albedo" />
            <resource stage="2" source="Opaque/Deferred.Normal" />
            <resource stage="3" source="Opaque/Deferred.Depth" />
        </resources>

        <![CDATA[
            Texture2D           gs_pAlbedoBuffer        : register(t1);
            Texture2D<half2>    gs_pNormalBuffer        : register(t2);
            Texture2D<float>    gs_pDepthBuffer         : register(t3);

            float2 TapLocation(int nSample, float nRandomAngle)
            {
	            float nAlpha = float(nSample + 0.5) * (1.0 / gs_nNumSamples);
	            float nAngle = nAlpha * (gs_nNumSpirals * 2 * gs_nPI) + nRandomAngle;
	            return nAlpha * float2(cos(nAngle), sin(nAngle));
            }
            
            float MainPixelProgram(INPUT kInput) : SV_TARGET
            {
                float nCenterDepth = gs_pDepthBuffer.Sample(gs_pPointSampler, kInput.texcoord);
                float3 nCenterPosition = GetViewPosition(kInput.texcoord, nCenterDepth);
	            float3 nCenterNormal = DecodeNormal(gs_pNormalBuffer.Sample(gs_pPointSampler, kInput.texcoord));

	            int2 nPixelCoord = kInput.position.xy;
	            float nRandomAngle = (3 * nPixelCoord.x ^ nPixelCoord.y + nPixelCoord.x * nPixelCoord.y) * 10;
                float nSampleRadius = gs_nRadius / (2 * (nCenterDepth * gs_nCameraMaxDistance) * gs_nCameraFieldOfView.x);

                float nAmbientOcclusion = 0;

	            [unroll]
	            for(int nSample = 0; nSample < gs_nNumSamples; nSample++)
	            {
	                float2 nSampleOffset = TapLocation(nSample, nRandomAngle);
                    float2 nSampleCoord = kInput.texcoord + (nSampleOffset * nSampleRadius);
                    float nSampleDepth = gs_pDepthBuffer.Sample(gs_pPointSampler, nSampleCoord);
                    float3 nSamplePosition = GetViewPosition(nSampleCoord, nSampleDepth);

		            float3 nDelta = nSamplePosition - nCenterPosition;
		            float nDeltaDelta = dot(nDelta, nDelta);
		            float nDeltaAngle = dot(nDelta, nCenterNormal);
		            if(nCenterDepth < 1) //do not AO for far plane
                    {
			            nAmbientOcclusion += max(0, nDeltaAngle + nCenterDepth * 0.001) / (nDeltaDelta + gs_nEpsilon);
                    }
	            }

	            nAmbientOcclusion *= 2.0 * gs_nPI * gs_nRadius * gs_nBeta / gs_nNumSamples;
	            nAmbientOcclusion = min(1, max(0, 1 - nAmbientOcclusion));
	            if (abs(ddx(nCenterPosition.z)) < 0.02)
                {
		            nAmbientOcclusion -= ddx(nAmbientOcclusion) * ((nPixelCoord.x & 1) - 0.5);
	            }

	            if (abs(ddy(nCenterPosition.z)) < 0.02)
                {
		            nAmbientOcclusion -= ddy(nAmbientOcclusion) * ((nPixelCoord.y & 1) - 0.5);
	            }
                
                return nAmbientOcclusion;
            }
        ]]>
    </pixel>
</filter>
