cbuffer ENGINEBUFFER                    : register(b0)
{
    float4x4 gs_nViewMatrix;
    float4x4 gs_nProjectionMatrix;
    float4x4 gs_nTransformMatrix;
    float3   gs_nCameraPosition;
	float    gs_nCameraViewDistance;
	float2   gs_nCameraView;
	float2   gs_nPadding;
};

cbuffer ORTHOBUFFER                     : register(b1)
{
    float4x4 gs_nOrthoMatrix;
};

struct INPUT
{
    float4 lightposition                : SV_POSITION;
    float4 lightdata                    : TEXCOORD0;
};

struct OUTPUT
{
    float4 position                     : SV_POSITION;
    float2 texcoord                     : TEXCOORD0;
	float3 view					        : TEXCOORD1;
    float3 lightposition                : TEXCOORD2;
    float4 lightdata                    : TEXCOORD3;
};

[maxvertexcount(4)]
void MainGeometryProgram(point INPUT aLight[1], inout TriangleStream<OUTPUT> aStream)
{
    OUTPUT kOutput;
	kOutput.view.z          = 1.0f;
    kOutput.lightposition   = mul(gs_nViewMatrix, aLight[0].lightposition).xyz;
    kOutput.lightdata       = aLight[0].lightdata;

    kOutput.position        = mul(gs_nOrthoMatrix, float4(0.0f, 0.0f, 0.0f, 1.0f));
    kOutput.texcoord        = float2(0.0f, 0.0f);
	kOutput.view.xy         = (float2(-1.0f, 1.0f) * gs_nCameraView);
    aStream.Append(kOutput);

    kOutput.position        = mul(gs_nOrthoMatrix, float4(1.0f, 0.0f, 0.0f, 1.0f));
    kOutput.texcoord        = float2(1.0f, 0.0f);
	kOutput.view.xy         = (float2( 1.0f, 1.0f) * gs_nCameraView);
    aStream.Append(kOutput);

    kOutput.position        = mul(gs_nOrthoMatrix, float4(0.0f, 1.0f, 0.0f, 1.0f));
    kOutput.texcoord        = float2(0.0f, 1.0f);
	kOutput.view.xy         = (float2(-1.0f,-1.0f) * gs_nCameraView);
    aStream.Append(kOutput);

    kOutput.position        = mul(gs_nOrthoMatrix, float4(1.0f, 1.0f, 0.0f, 1.0f));
    kOutput.texcoord        = float2(1.0f, 1.0f);
	kOutput.view.xy         = (float2( 1.0f,-1.0f) * gs_nCameraView);
    aStream.Append(kOutput);
}
