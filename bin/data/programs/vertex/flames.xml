<?xml version="1.0"?>
<program>
    <layout>
		<element type="rg_float" name="POSITION" index="0" class="vertex" slot="0" />
		<element type="rg_float" name="TEXCOORD" index="0" class="vertex" slot="0" />
    </layout>
    <vertex>
        <![CDATA[
            struct INSTANCE
            {
                float3      m_nPosition;
                float       m_nAge;
                float       m_nSpin;
            };
            
            StructuredBuffer<INSTANCE> gs_aInstances    : register(t0);
            Texture1D                  gs_pGradient     : register(t1);

			struct SOURCEVERTEX
			{
				float2 position                         : POSITION;
				float2 texcoord                         : TEXCOORD0;
                uint instance                           : SV_InstanceId;
			};

            WORLDVERTEX GetWorldVertex(in SOURCEVERTEX kSource)
			{
                INSTANCE kInstance = gs_aInstances[kSource.instance];
                
                float nSin, nCos;
                sincos(kInstance.m_nSpin, nSin, nCos);
                float nSize = ((1.0f - kInstance.m_nAge) * 0.5f);
                nSin *= nSize;
                nCos *= nSize;
                
	            float3 kXOffSet = mul(float3(nSin, nCos, 0.0f), (float3x3)gs_nViewMatrix);
	            float3 kYOffSet = mul(float3(nCos,-nSin, 0.0f), (float3x3)gs_nViewMatrix);

				WORLDVERTEX kVertex;
	            kVertex.position      = float4(kInstance.m_nPosition, 1.0f);
	            kVertex.position.xyz += (kXOffSet * kSource.position.x);
	            kVertex.position.xyz += (kYOffSet * kSource.position.y);
				kVertex.texcoord      = kSource.texcoord;
                kVertex.normal        = mul(float3(0,0,-1), (float3x3)gs_nViewMatrix);
                kVertex.color         = gs_pGradient.SampleLevel(gs_pLinearSampler, kInstance.m_nAge, 0);
                kVertex.color.a = 1;
				return kVertex;
			}
        ]]>
    </vertex>
</program>
